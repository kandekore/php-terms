{
  "categories": [
    {
      "name": "Variables",
      "description": "Variables in PHP are used to store data that can be used and manipulated throughout the program. They start with the $ symbol followed by the name of the variable.",
      "concepts": [
        {
          "term": "$var",
          "description": "Traditional variable declaration in PHP. Variables start with the $ symbol and can store data of any type.",
          "code": "$var = 'Hello, world!';\necho $var; // Outputs: Hello, world!"
        },
        {
          "term": "Data Types",
          "description": "PHP supports several data types, including scalar types (String, Integer, Float, Boolean), compound types (Array, Object), and special types (Resource, NULL).",
          "code": "$string = 'Hello, PHP!';\n$integer = 42;\n$float = 3.14;\n$boolean = true;\n$array = array(1, 2, 3);\n$object = new stdClass();\n$null = NULL;"
        }
      ]
    },
    {
      "name": "Operators",
      "description": "Operators in PHP are used to perform operations on variables and values. PHP supports a wide range of operators, including arithmetic, assignment, comparison, logical, unary, and ternary operators.",
      "concepts": [
        {
          "term": "Arithmetic",
          "description": "Arithmetic operators include +, -, *, /, % and are used to perform common mathematical operations.",
          "code": "$sum = 5 + 5; // 10\n$difference = 10 - 5; // 5\n$product = 5 * 5; // 25\n$quotient = 10 / 2; // 5\n$remainder = 10 % 3; // 1"
        },
        {
          "term": "Assignment",
          "description": "Assignment operators include =, +=, -=, *=, /= and are used to write a value to a variable.",
          "code": "$x = 10;\n$x += 5; // $x is now 15\n$x -= 5; // $x is now 10\n$x *= 5; // $x is now 50\n$x /= 5; // $x is now 10"
        },
        {
          "term": "Comparison",
          "description": "Comparison operators include ==, ===, !=, !==, >, <, >=, <= and are used to compare two values.",
          "code": "$x = 5;\n$y = '5';\nvar_dump($x == $y);  // bool(true) because of equal value\nvar_dump($x === $y); // bool(false) because types are different"
        },
        {
          "term": "Logical",
          "description": "Logical operators include &&, ||, ! and are used to combine conditional statements.",
          "code": "$x = 6;\n$y = 3;\nif ($x > 5 && $y < 5) {\n    echo 'True';\n} else {\n    echo 'False';\n}"
        }
      ]
    },
    {
      "name": "Control Flow",
      "description": "Control flow statements in PHP are used to specify the execution order of blocks of code. They include conditional statements, loops, and switches.",
      "concepts": [
        {
          "term": "if statement",
          "description": "The if statement is used to execute some code if a condition is true.",
          "code": "if ($x > 0) {\n    echo 'x is positive';\n}"
        },
        {
          "term": "else statement",
          "description": "The else statement is used to execute some code if the condition in the if statement is not true.",
          "code": "if ($x > 0) {\n    echo 'x is positive';\n} else {\n    echo 'x is not positive';\n}"
        },
        {
          "term": "else if statement",
          "description": "The else if statement is used to specify a new condition if the first condition is false.",
          "code": "if ($x > 0) {\n    echo 'x is positive';\n} else if ($x < 0) {\n    echo 'x is negative';\n} else {\n    echo 'x is zero';\n}"
        },
        {
          "term": "switch statement",
          "description": "The switch statement is used to perform different actions based on different conditions.",
          "code": "switch ($x) {\n    case 0:\n        echo 'x equals 0';\n        break;\n    case 1:\n        echo 'x equals 1';\n        break;\n    default:\n        echo 'x is neither 0 nor 1';\n}"
        },
        {
          "term": "for loop",
          "description": "The for loop is used to run a block of code a specified number of times.",
          "code": "for ($x = 0; $x <= 10; $x++) {\n    echo 'The number is: ' . $x . '\\n';\n}"
        },
        {
          "term": "while loop",
          "description": "The while loop is used to run a block of code as long as a condition is true.",
          "code": "$x = 0;\nwhile ($x <= 10) {\n    echo 'The number is: ' . $x . '\\n';\n    $x++;\n}"
        },
        {
          "term": "do-while loop",
          "description": "The do-while loop is a variant of the while loop that will execute the block of code once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.",
          "code": "$x = 0;\ndo {\n    echo 'The number is: ' . $x . '\\n';\n    $x++;\n} while ($x <= 10);"
        }
      ]
    },
    {
      "name": "Functions",
      "description": "Functions in PHP are blocks of code that can be executed repeatedly. PHP supports various types of functions, including named functions, anonymous functions, arrow functions, and IIFEs.",
      "concepts": [
        {
          "term": "Function declaration",
          "description": "Using the function keyword to declare a function.",
          "code": "function sayHello() {\n  echo 'Hello, PHP!';\n}\nsayHello();"
        },
        {
          "term": "Anonymous functions",
          "description": "Functions without a name, similar to JavaScript's function expressions. Often used as callback functions.",
          "code": "$greet = function($name) {\n  echo 'Hello, ' . $name;\n};\n$greet('PHP');"
        },
        {
          "term": "Arrow functions",
          "description": "Introduced in PHP 7.4, offer a more concise syntax for anonymous functions.",
          "code": "$fn = fn($x) => $x + 1;\necho $fn(2); // Outputs 3"
        },
        {
          "term": "IIFE (Immediately Invoked Function Expression)",
          "description": "Anonymous functions that are executed immediately after they are defined.",
          "code": "(function() {\n  echo 'Hello, PHP!';\n})();"
        }
      ]
    },
    {
      "name": "Scope",
      "description": "The scope of a variable determines its accessibility. PHP supports global scope, local scope, and the use of static variables to preserve local variable values between function calls.",
      "concepts": [
        {
          "term": "Global scope",
          "description": "Variables declared outside any function have a global scope and can only be accessed outside functions.",
          "code": "$globalVar = 'This is a global variable';\nfunction test() {\n  global $globalVar;\n  echo $globalVar;\n}\ntest();"
        },
        {
          "term": "Local scope",
          "description": "Variables declared within a function have a local scope and can only be accessed within that function.",
          "code": "function test() {\n  $localVar = 'This is a local variable';\n  echo $localVar;\n}\ntest();"
        },
        {
          "term": "Static variables",
          "description": "Static variables preserve their value between function calls.",
          "code": "function test() {\n  static $count = 0;\n  $count++;\n  echo $count;\n}\ntest();\ntest();\ntest();"
        }
      ]
    },
    {
      "name": "Array Methods",
      "description": "PHP provides a rich set of array methods for manipulating array elements, including adding, removing, splitting, and merging arrays.",
      "concepts": [
        {
          "term": "array_push()",
          "description": "Adds one or more elements to the end of an array.",
          "code": "$stack = array('orange', 'banana');\narray_push($stack, 'apple', 'raspberry');\nprint_r($stack);"
        },
        {
          "term": "array_pop()",
          "description": "Removes the last element from an array and returns it.",
          "code": "$fruits = array('apple', 'orange', 'banana');\n$fruit = array_pop($fruits);\necho $fruit;"
        },
        {
          "term": "array_shift()",
          "description": "Removes the first element from an array and returns it.",
          "code": "$fruits = array('apple', 'orange', 'banana');\n$fruit = array_shift($fruits);\necho $fruit;"
        },
        {
          "term": "array_unshift()",
          "description": "Adds one or more elements to the beginning of an array.",
          "code": "$queue = array('orange', 'banana');\narray_unshift($queue, 'apple', 'raspberry');\nprint_r($queue);"
        },
        {
          "term": "array_splice()",
          "description": "Removes a portion of the array and replaces it with something else.",
          "code": "$input = array('red', 'green', 'blue', 'yellow');\narray_splice($input, 2);\nprint_r($input);"
        },
        {
          "term": "array_slice()",
          "description": "Extracts a slice of the array.",
          "code": "$input = array('red', 'green', 'blue', 'yellow');\n$output = array_slice($input, 2);\nprint_r($output);"
        },
        {
          "term": "array_merge()",
          "description": "Merges one or more arrays.",
          "code": "$array1 = array('color' => 'red', 2, 4);\n$array2 = array('a', 'b', 'color' => 'green', 'shape' => 'trapezoid', 4);\n$result = array_merge($array1, $array2);\nprint_r($result);"
        }
      ]
    },
    {
      "name": "Array Iteration",
      "description": "PHP provides several functions to iterate over arrays, allowing for flexible data processing and manipulation.",
      "concepts": [
        {
          "term": "foreach()",
          "description": "Used to loop through each key/value pair in an array.",
          "code": "$arr = array('one', 'two', 'three');\nforeach ($arr as $value) {\n  echo $value . '\\n';\n}"
        },
        {
          "term": "array_map()",
          "description": "Applies a callback to the elements of the given arrays.",
          "code": "$func = function($value) { return $value * 2; };\n$arr = array(1, 2, 3, 4, 5);\n$result = array_map($func, $arr);\nprint_r($result);"
        },
        {
          "term": "array_filter()",
          "description": "Filters elements of an array using a callback function.",
          "code": "$arr = array(1, 2, 3, 4, 5, 6);\n$even = array_filter($arr, function($val) { return $val % 2 === 0; });\nprint_r($even);"
        },
        {
          "term": "array_reduce()",
          "description": "Iteratively reduces the array to a single value using a callback function.",
          "code": "$arr = array(1, 2, 3, 4, 5);\n$sum = array_reduce($arr, function($carry, $item) { return $carry + $item; }, 0);\necho $sum;"
        }
      ]
    },
    {
      "name": "Objects",
      "description": "Objects in PHP represent instances of classes. PHP provides several ways to interact with objects, including accessing properties, object iteration, and more.",
      "concepts": [
        {
          "term": "Accessing Properties",
          "description": "Properties of objects in PHP can be accessed using the '->' operator.",
          "code": "$obj = new MyClass();\necho $obj->property;"
        },
        {
          "term": "Object Iteration",
          "description": "PHP allows iterating over the properties of an object using foreach loop.",
          "code": "$obj = new MyClass();\nforeach ($obj as $property => $value) {\n  echo $property . ': ' . $value . '\\n';\n}"
        },
        {
          "term": "Class and Object Functions",
          "description": "PHP offers functions like get_class_methods() and get_class_vars() for retrieving information about classes and objects.",
          "code": "class MyClass {\n  public $prop1 = 'value1';\n  function func1() {}\n}\nprint_r(get_class_vars('MyClass'));\nprint_r(get_class_methods('MyClass'));"
        },
        {
          "term": "Object cloning",
          "description": "Creating a copy of an object is achieved using the 'clone' keyword.",
          "code": "$obj1 = new MyClass();\n$obj2 = clone $obj1;"
        },
        {
          "term": "Object comparison",
          "description": "Objects can be compared using '==' (for properties) and '===' (for identity).",
          "code": "$obj1 = new MyClass();\n$obj2 = new MyClass();\nvar_dump($obj1 == $obj2);\nvar_dump($obj1 === $obj2);"
        }
      ]
    },
    {
      "name": "Promises and Asynchronous PHP",
      "description": "While native support for promises and asynchronous programming is not provided in PHP, libraries and extensions offer these capabilities.",
      "concepts": [
        {
          "term": "Promises",
          "description": "Promises are not native to PHP, but can be utilized through libraries like Guzzle or ReactPHP.",
          "code": "// Using Guzzle promises\n$promise = $client->getAsync('http://httpbin.org/get');\n$promise->then(function ($response) {\n    echo 'Got a response! ' . $response->getBody();\n});"
        },
        {
          "term": "Asynchronous PHP",
          "description": "Asynchronous operations in PHP can be achieved using extensions like Swoole, or libraries like ReactPHP.",
          "code": "<?php\nrequire 'vendor/autoload.php'; // Assuming you have installed ReactPHP via Composer\n\nuse React\\EventLoop\\Factory;\nuse React\\Http\\Server;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse React\\Http\\Response;\n\n$loop = Factory::create();\n\n$server = new Server(function (ServerRequestInterface $request) {\n    // Simulate an asynchronous operation, such as fetching data from a database\n    return new React\\Promise\\Promise(function ($resolve) use ($request) {\n        // Emulate a delay\n        $loop = React\\EventLoop\\Factory::create();\n        $loop->addTimer(2, function () use ($resolve, $request) {\n            $resolve(new Response(\n                200,\n                ['Content-Type' => 'text/plain'],\n                'Hello, World!'\n            ));\n        });\n        $loop->run();\n    });\n});\n\n$socket = new React\\Socket\\Server('127.0.0.1:8000', $loop);\n$server->listen($socket);\n\necho 'Server running at http://127.0.0.1:8000' . PHP_EOL;\n\n$loop->run();\n"
        }
        
      ]
    },
    {
      "name": "Error Handling",
      "description": "PHP provides structured error handling mechanisms, including try...catch statements, throw statements, and Error/Exception classes.",
      "concepts": [
        {
          "term": "try...catch statement",
          "description": "Used to catch exceptions that are thrown within the try block.",
          "code": "try {\n  throw new Exception('An error occurred');\n} catch (Exception $e) {\n  echo 'Caught exception: ',  $e->getMessage(), '\\n';\n}"
        },
        {
          "term": "throw statement",
          "description": "Used to throw an exception manually.",
          "code": "throw new Exception('An error occurred');"
        },
        {
          "term": "Error and Exception classes",
          "description": "PHP uses Error and Exception classes for error handling.",
          "code": "class MyException extends Exception {}\ntry {\n  throw new MyException('Custom error');\n} catch (MyException $e) {\n  echo $e->getMessage();\n}"
        }
      ]
    },
    {
      "name": "JSON Handling",
      "description": "PHP offers json_encode() and json_decode() functions to convert between PHP arrays/objects and JSON format.",
      "concepts": [
        {
          "term": "json_encode()",
          "description": "Converts a PHP variable into a JSON string.",
          "code": "$arr = array('a' => 1, 'b' => 2, 'c' => 3);\necho json_encode($arr);"
        },
        {
          "term": "json_decode()",
          "description": "Converts a JSON string into a PHP variable.",
          "code": "$json = '{\"a\":1,\"b\":2,\"c\":3}';\nvar_dump(json_decode($json, true));"
        }
      ]
    },
    {
      "name": "PHP Tags and Basics",
      "description": "PHP scripts can be embedded into HTML using PHP tags. There are different types of tags for different purposes.",
      "concepts": [
        {
          "term": "Standard Tags",
          "description": "The standard PHP tags are '<?php ?>' and are used to enclose PHP code.",
          "code": "<?php\necho 'Hello, world!';\n?>"
        },
        {
          "term": "Short Tags",
          "description": "Short tags '<? ?>' can be used to abbreviate the standard PHP tags, depending on the 'short_open_tag' ini setting.",
          "code": "<?\necho 'Hello, world!';\n?>"
        },
        {
          "term": "Echo shorthand",
          "description": "The echo shorthand '<?= ?>' is used to output the value of a variable.",
          "code": "<?= '$var value' ?>"
        }
      ]
    },
    {
      "name": "Database Interaction",
      "description": "Database interaction in PHP can be achieved through PDO (PHP Data Objects) or the mysqli extension, enabling CRUD operations.",
      "concepts": [
        {
          "term": "PDO (PHP Data Objects)",
          "description": "PDO provides a consistent interface for accessing databases in PHP.",
          "code": "$pdo = new PDO('mysql:host=localhost;dbname=testdb', 'username', 'password');"
        },
        {
          "term": "mysqli extension",
          "description": "The mysqli extension allows PHP to interact with MySQL databases.",
          "code": "$mysqli = new mysqli('localhost', 'username', 'password', 'dbname');"
        },
        {
          "term": "CRUD Operations",
          "description": "CRUD (Create, Read, Update, Delete) operations can be performed on databases using SQL queries executed through PDO or mysqli.",
          "code": "$pdo->query('SELECT * FROM table');\n$mysqli->query('DELETE FROM table WHERE id=1');"
        }
      ]
    },
    {
      "name": "Web Development Concepts",
      "description": "PHP supports various web development concepts, including sessions, cookies, and file handling, along with superglobals for data transfer.",
      "concepts": [
        {
          "term": "Sessions and Cookies",
          "description": "Managing user sessions and storing data in cookies.",
          "code": "// Starting a session\nsession_start();\n$_SESSION['user'] = 'John Doe';\n// Setting a cookie\nsetcookie('user', 'John Doe', time() + 86400);"
        },
        {
          "term": "File Handling",
          "description": "PHP provides functions for opening, reading, writing, and closing files.",
          "code": "$file = fopen('test.txt', 'r');\n$content = fread($file, filesize('test.txt'));\nfclose($file);"
        },
        {
          "term": "Superglobals",
          "description": "Superglobals such as $_GET, $_POST, and $_SESSION are used for global data access in PHP.",
          "code": "// Using $_GET\necho 'Hello, ' . htmlspecialchars($_GET['name']) . '!';"
        }
      ]
    },
    {
      "name": "PHP and HTML",
      "description": "PHP can be easily integrated with HTML to create dynamic web pages, handle forms, and process user input.",
      "concepts": [
        {
          "term": "Embedding PHP in HTML",
          "description": "Mixing PHP code within an HTML context to dynamically generate web page content.",
          "code": "<!DOCTYPE html>\n<html>\n<body>\n<?php echo '<p>Hello, World!</p>'; ?>\n</body>\n</html>"
        },
        {
          "term": "Form handling",
          "description": "Processing form data sent via GET or POST requests.",
          "code": "// Processing a POST request\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  echo 'Hello, ' . htmlspecialchars($_POST['name']) . '!';\n}"
        }
      ]
    },
    {
      "name": "Security",
      "description": "PHP includes features for input validation, sanitization, and preventing common security vulnerabilities like SQL injection and XSS.",
      "concepts": [
        {
          "term": "Input Validation and Sanitization",
          "description": "Using filter_var() and related functions for data validation and sanitization.",
          "code": "$email = filter_var($_POST['email'], FILTER_VALIDATE_EMAIL);"
        },
        {
          "term": "SQL Injection Prevention",
          "description": "Using prepared statements to prevent SQL injection attacks.",
          "code": "$stmt = $pdo->prepare('SELECT * FROM users WHERE email = :email');\n$stmt->execute(['email' => $email]);"
        },
        {
          "term": "Cross-Site Scripting (XSS) Prevention",
          "description": "Escaping output with htmlspecialchars() to prevent XSS attacks.",
          "code": "echo 'Hello, ' . htmlspecialchars($_GET['name']) . '!';"
        }
      ]
    },
    {
      "name": "Advanced PHP Features",
      "description": "PHP supports advanced programming features such as namespaces, traits, and generators, enhancing the language's capabilities.",
      "concepts": [
        {
          "term": "Namespaces",
          "description": "Organizing code into separate namespaces to prevent name collisions.",
          "code": "namespace MyProject;\nclass MyClass {}"
        },
        {
          "term": "Traits",
          "description": "Enabling code reuse in single inheritance languages like PHP.",
          "code": "trait Sharable {\n  public function share() {\n    echo 'Sharing this!';\n  }\n}\nclass Post {\n  use Sharable;\n}"
        },
        {
          "term": "Generators",
          "description": "Using the yield keyword for generating series of values on the fly.",
          "code": "function numbers() {\n  for ($i = 0; $i < 5; ++$i) {\n    yield $i;\n  }\n}\nforeach (numbers() as $number) {\n  echo $number . '\\n';\n}"
        }
      ]
    },
    {
      "name": "PHP.ini Configuration",
      "description": "The php.ini file allows for extensive configuration of PHP settings, impacting error reporting, extensions, and runtime behaviors.",
      "concepts": [
        {
          "term": "Configuring PHP settings",
          "description": "Through the php.ini file for error reporting, extensions, and other runtime behaviors.",
          "code": "; Example for setting display_errors directive in php.ini\ndisplay_errors = On"
        }
      ]
    },
    {
      "name": "PHP Frameworks and Composer",
      "description": "PHP frameworks like Laravel and Symfony provide robust platforms for building web applications. Composer is used for dependency management.",
      "concepts": [
        {
          "term": "Laravel",
          "description": "A PHP framework for web artisans, focusing on elegance and simplicity.",
          "code": "// Installation via Composer\ncomposer create-project --prefer-dist laravel/laravel blog"
        },
        {
          "term": "Symfony",
          "description": "A set of reusable PHP components and a web application framework.",
          "code": "// Starting a new Symfony project\ncomposer create-project symfony/website-skeleton my_project_name"
        },
        {
          "term": "Composer",
          "description": "Dependency management in PHP, enabling easy package management and autoloading.",
          "code": "// Installing a package with Composer\ncomposer require vendor/package"
        }
      ]
    }
  
  ]
}
